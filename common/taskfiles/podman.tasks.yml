version: "3"

vars:
  IMAGE_TAG: '{{.IMAGE_TAG | default "latest"}}'
  COMPUTED_IMAGE: '{{.IMAGE | default (printf "%s:%s" .IMAGE_NAME .IMAGE_TAG)}}'

tasks:
  build:
    desc: Build the '{{.COMPUTED_IMAGE}}' image
    summary: |
      Build the '{{.COMPUTED_IMAGE}}' image

      This task builds the container image defined in {{.CONTAINERFILE}}.

      Variables:
        - IMAGE_NAME: Provide the image name, required.
        - CONTAINERFILE: Provide the path to the Containerfile, required.
        - IMAGE_TAG: Provide the image tag, defaults to `latest`.
        - IMAGE: Provide the full image tag, defaults to a `IMAGE_NAME:IMAGE_TAG`.
        - PODMAN_OPTS: Optionally provide options for the `podman build` command.
    requires:
      vars:
        - IMAGE_NAME
        - CONTAINERFILE
    vars:
      FORMAT: '{{.FORMAT | default "oci"}}'
    cmds:
      - podman build .
        --file {{.CONTAINERFILE}}
        --tag {{.COMPUTED_IMAGE}}
        --format {{.FORMAT}}
        {{.PODMAN_OPTS}}
      - task: test
    # TODO: Allow work avoidance but with dynamically provided files part of the
    #   Containerfile, otherwise it won't work when there are files copied into
    #   the container.

  test:
    desc: Test the '{{.COMPUTED_IMAGE}}' image
    summary: |
      Test the '{{.COMPUTED_IMAGE}}' image

      This task tests that software defined in {{.EXPECTED_CONFIG}} is executable
      and installed in the right version.

      Variables:
        - IMAGE_NAME: Provide the image name, required.
        - IMAGE_TAG: Provide the image tag, defaults to `latest`.
        - IMAGE: Provide the full image tag, defaults to a `IMAGE_NAME:IMAGE_TAG`.
    requires:
      vars:
        - IMAGE_NAME
        - EXPECTED_CONFIG
    cmds:
      - bash common/scripts/check-versions.sh
        {{.EXPECTED_CONFIG}}
        {{.COMPUTED_IMAGE}}
    preconditions:
      - sh: which yq
        msg: The `yq` CLI is required to run this task.
      - sh: which jq
        msg: The `jq` CLI is required to run this task.

  release:
    vars:
      # TODO: dynamic but overridable, based on 'branch-timestamp-hash'?
      #   maybe through a script that checks for the environment variable?
      #   what if we want to release multiple tags of a single image?
      IMAGE_TAG: '{{.IMAGE_TAG | default "latest"}}'
    cmds:
      - task: build
      - task: test
      - echo "TODO, tagging? Pushing?"

  debug:
    desc: Debug the '{{.COMPUTED_IMAGE}}' image
    summary: |
      Debug the '{{.COMPUTED_IMAGE}}' image

      This task runs the container image and mounts the repository root into the
      the container. The working dir is set to this mounted folder.

      Variables:
        - IMAGE_NAME: Provide the image name, required.
        - IMAGE_TAG: Provide the image tag, defaults to `latest`.
        - IMAGE: Provide the full image tag, defaults to a `IMAGE_NAME:IMAGE_TAG`.
        - PODMAN_OPTS: Optionally provide options for the `podman run` command.
    requires:
      vars:
        - IMAGE_NAME
    cmds:
      - podman run
        --rm -it
        --volume .:/repo
        --workdir /repo
        {{.PODMAN_OPTS}}
        {{.COMPUTED_IMAGE}}
    interactive: true

  wsl:
    desc: Build a WSL distro from '{{.COMPUTED_IMAGE}}' image
    summary: |
      Build a WSL distro from '{{.COMPUTED_IMAGE}}' image

      This task builds a WSL distro based on the '{{.COMPUTED_IMAGE}}' image.
      The resulting tar archive can be imported on a Windows system with WSL
      installed.
    requires:
      vars:
        - IMAGE_NAME
    vars:
      BUILD_PATH: "build"
      TMP_PATH: "{{.BUILD_PATH}}/{{.IMAGE_NAME}}-{{.IMAGE_TAG}}/"
      ROOTFS_TAR: "{{.TMP_PATH}}/{{.IMAGE_NAME}}-{{.IMAGE_TAG}}.tar"
      ZIP_ARCHIVE: "{{.IMAGE_NAME}}-{{.IMAGE_TAG}}.zip"
    # TODO: Write script
    cmds:
      # Export container filesystem
      - |
        set -o pipefail
        NAME={{.IMAGE_NAME}}-export-$(date +%s)
        podman run --name $NAME --tty {{.COMPUTED_IMAGE}} ls / > /dev/null
        ID=$(podman ps --all | grep -i $NAME | awk '{ print $1 }')
        mkdir -p {{.TMP_PATH}}
        podman export --output {{.ROOTFS_TAR}} $ID
        podman rm -f $ID

      # Prepare archive contents
      - cp common/wsl/*.ps1 {{.TMP_PATH}}/.
      - sed -i {{.TMP_PATH}}/installer.ps1
          -e 's/<name>/{{.IMAGE_NAME}}-{{.IMAGE_TAG}}/'
          -e 's/<tar>/{{.IMAGE_NAME}}-{{.IMAGE_TAG}}.tar/'

      # Create archive
      - |
        pushd {{.BUILD_PATH}} || exit 1
        zip -r {{.ZIP_ARCHIVE}} {{.IMAGE_NAME}}-{{.IMAGE_TAG}}
        popd || exit 1
    status:
      - test -f {{.ROOTFS_TAR}}
      # Task is up-to-date if container image is older than build artifact
      - |
        image_creation_time_utc=$(podman inspect {{.COMPUTED_IMAGE}} --format '{{`{{.Created}}`}}' \
          | cut -d. -f1 \
          | xargs -I{} date -u -d {} +%s)
        build_creation_time_utc=$(TZ=UTC stat -c %Y {{.ROOTFS_TAR}})
        test "$image_creation_time_utc" -lt "$build_creation_time_utc"
    preconditions:
      - sh: which podman
        msg: The `podman` CLI is required to run this task.
      - sh: which awk
        msg: The `awk` CLI is required to run this task.
      - sh: which zip
        msg: The `zip` CLI is required to run this task.
      - sh: podman image exists {{.COMPUTED_IMAGE}}
        msg: The `{{.COMPUTED_IMAGE}}` image does not exist. Have you built it already?
